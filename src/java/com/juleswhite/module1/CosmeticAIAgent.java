package com.juleswhite.module1;

import java.util.*;
import java.util.stream.Collectors;
import java.math.BigDecimal;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import service.impl.ProductServiceImpl;
import service.impl.CartService;
import service.impl.CartItemService;
import service.interfaces.ProductService;
import model.entity.Product;
import model.entity.Cart;
import model.entity.CartItem;
import com.juleswhite.module1.QRBankUtil;
import service.impl.AddressService;
import service.impl.OrderServiceImpl;
import service.impl.OrderItemService;
import service.interfaces.IAddressService;
import service.interfaces.OrderService;
import service.interfaces.IOrderItemService;
import model.entity.Address;
import model.entity.Order;
import model.entity.OrderItem;

public class CosmeticAIAgent {
    private final LLM llm = new LLM();
    private final ProductService productService = new ProductServiceImpl();
    private final CartService cartService = new CartService();
    private final CartItemService cartItemService = new CartItemService();
    private final List<Product> availableProducts = productService.getActiveProducts();
    private final String sessionId = "SESSION_" + System.currentTimeMillis();
    private final List<Message> conversationHistory = new ArrayList<>();
    
    // Context variables
    private Product lastSelectedProduct = null;
    private List<Product> lastListedProducts = new ArrayList<>();
    private Integer userId = null; // Th√™m userId ƒë·ªÉ check gi·ªè h√†ng
    private String pendingCODInfo = null; // L∆∞u tr·∫°ng th√°i ch·ªù nh·∫≠p th√¥ng tin COD

    // B·ªï sung service cho nghi·ªáp v·ª• m·ªõi
    private final IAddressService addressService = new AddressService();
    private final OrderService orderService = new OrderServiceImpl();
    private final IOrderItemService orderItemService = new OrderItemService();

    public CosmeticAIAgent() {
        initializeSystem();
    }
    
    // Constructor v·ªõi userId
    public CosmeticAIAgent(Integer userId) {
        this.userId = userId;
        initializeSystem();
    }
    
    // Setter cho userId
    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    private void initializeSystem() {
        StringBuilder prompt = new StringBuilder("B·∫°n l√† AI Agent t∆∞ v·∫•n m·ªπ ph·∫©m. C√°c s·∫£n ph·∫©m c√≥:\n");
        availableProducts.forEach(p -> prompt.append("- ").append(formatProduct(p)).append("\n"));
        prompt.append("\nH√£y t∆∞ v·∫•n th√¢n thi·ªán, chuy√™n nghi·ªáp b·∫±ng ti·∫øng Vi·ªát.");
        conversationHistory.add(new Message("system", prompt.toString()));
    }

    // **1. LOGIC GI√Å - ∆Øu ti√™n SalePrice**
    private BigDecimal getEffectivePrice(Product p) {
        return (p.getSalePrice() != null && p.getSalePrice().compareTo(BigDecimal.ZERO) > 0) 
            ? p.getSalePrice() : p.getPrice();
    }

    private String formatProduct(Product p) {
        BigDecimal price = getEffectivePrice(p);
        String priceStr = String.format("%,.0f", price.doubleValue());
        boolean hasDiscount = p.getSalePrice() != null && p.getSalePrice().compareTo(p.getPrice()) < 0;
        
        if (hasDiscount) {
            return String.format("%s - %s (Gi√° KM: %s VNƒê, G·ªëc: %,.0f VNƒê)", 
                p.getProductName(), p.getShortDescription(), priceStr, p.getPrice().doubleValue());
        }
        return String.format("%s - %s (Gi√°: %s VNƒê)", 
            p.getProductName(), p.getShortDescription(), priceStr);
    }

    private Integer getCategoryID(Product p) {
        return (p.getCategoryId() != null) ? p.getCategoryId().getCategoryId() : null;
    }

    // **2. EXTRACT PRODUCTS t·ª´ AI response**
    private void extractProductsFromResponse(String aiResponse) {
        lastListedProducts.clear();
        
        // T√¨m pattern "1. T√™n s·∫£n ph·∫©m", "2. T√™n s·∫£n ph·∫©m"
        Pattern pattern = Pattern.compile("(\\d+)\\. (.+?)(?=\\n|$)", Pattern.MULTILINE);
        Matcher matcher = pattern.matcher(aiResponse);
        
        while (matcher.find()) {
            String productText = matcher.group(2);
            
            // T√¨m s·∫£n ph·∫©m match v·ªõi text
            Product found = availableProducts.stream()
                .filter(p -> productText.toLowerCase().contains(p.getProductName().toLowerCase()))
                .findFirst()
                .orElse(null);
                
            if (found != null) {
                lastListedProducts.add(found);
            }
        }
        
        System.out.println("DEBUG - Extracted " + lastListedProducts.size() + " products from AI response");
    }

    // **3. LOGIC SELECTION - Khi user ch·ªçn s·ªë**
    private void handleSelection(String input) {
        if (input.matches("^\\d+$") && !lastListedProducts.isEmpty()) {
            int idx = Integer.parseInt(input);
            if (idx > 0 && idx <= lastListedProducts.size()) {
                lastSelectedProduct = lastListedProducts.get(idx - 1);
                System.out.println("DEBUG - Selected: " + lastSelectedProduct.getProductName() + 
                    " - Price: " + getEffectivePrice(lastSelectedProduct));
            }
        }
    }

    // **4. LOGIC CHECK GI·ªé H√ÄNG - Chi ti·∫øt s·∫£n ph·∫©m v√† t·ªïng ti·ªÅn**
    private String getCartSummary() {
        if (userId == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng.";
        }
        
        try {
            Cart cart = cartService.getActiveCart(userId);
            if (cart == null) {
                return "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.";
            }
            
            List<CartItem> cartItems = cartItemService.getAllByCartID_Admin(cart.getCartID());
            if (cartItems == null || cartItems.isEmpty()) {
                return "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.";
            }
            
            // Debug: Ki·ªÉm tra s·ªë l∆∞·ª£ng items v√† th√¥ng tin
            System.out.println("DEBUG - Cart ID: " + cart.getCartID());
            System.out.println("DEBUG - Cart items count: " + cartItems.size());
            for (CartItem item : cartItems) {
                System.out.println("DEBUG - Item: " + item.getProduct().getProductName() + 
                    ", Qty: " + item.getQuantity() + 
                    ", Price: " + item.getProduct().getPrice() + 
                    ", SalePrice: " + item.getProduct().getSalePrice() +
                    ", EffectivePrice: " + getEffectivePrice(item.getProduct()) +
                    ", Status: " + item.getStatus() +
                    ", IsDeleted: " + item.isIsDeleted());
            }
            
            // L·ªçc ra nh·ªØng items kh√¥ng b·ªã x√≥a v√† c√≥ status ph√π h·ª£p
            cartItems = cartItems.stream()
                .filter(item -> !item.isIsDeleted() && !"checkout".equalsIgnoreCase(item.getStatus()))
                .collect(Collectors.toList());
            
            System.out.println("DEBUG - After filtering, items count: " + cartItems.size());
            
            StringBuilder summary = new StringBuilder();
            summary.append("üõí <b>Gi·ªè h√†ng c·ªßa b·∫°n:</b><br><br>");
            
            BigDecimal totalAmount = BigDecimal.ZERO;
            int totalItems = 0;
            
            for (int i = 0; i < cartItems.size(); i++) {
                CartItem item = cartItems.get(i);
                Product product = item.getProduct();
                BigDecimal effectivePrice = getEffectivePrice(product);
                BigDecimal itemTotal = effectivePrice.multiply(BigDecimal.valueOf(item.getQuantity()));
                
                summary.append(String.format("%d. <b>%s</b><br>", i + 1, product.getProductName()));
                summary.append(String.format("   S·ªë l∆∞·ª£ng: %d<br>", item.getQuantity()));
                
                if (product.getSalePrice() != null && product.getSalePrice().compareTo(product.getPrice()) < 0) {
                    summary.append(String.format("   Gi√°: %,.0f VNƒê (KM t·ª´ %,.0f VNƒê)<br>", 
                        effectivePrice.doubleValue(), product.getPrice().doubleValue()));
                } else {
                    summary.append(String.format("   Gi√°: %,.0f VNƒê<br>", effectivePrice.doubleValue()));
                }
                
                summary.append(String.format("   Th√†nh ti·ªÅn: %,.0f VNƒê<br><br>", itemTotal.doubleValue()));
                
                totalAmount = totalAmount.add(itemTotal);
                totalItems += item.getQuantity();
            }
            
            summary.append(String.format("üìä <b>T·ªïng c·ªông:</b> %d s·∫£n ph·∫©m<br>", totalItems));
            summary.append(String.format("üí∞ <b>T·ªïng ti·ªÅn:</b> %,.0f VNƒê<br><br>", totalAmount.doubleValue()));
            summary.append("B·∫°n c√≥ mu·ªën thanh to√°n kh√¥ng? (Ch·ªçn 'thanh to√°n khi nh·∫≠n h√†ng' ho·∫∑c 'chuy·ªÉn kho·∫£n VietQR')");
            
            return summary.toString();
            
        } catch (Exception e) {
            System.err.println("Error getting cart summary: " + e.getMessage());
            return "C√≥ l·ªói khi ki·ªÉm tra gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // **5. LOGIC THANH TO√ÅN KHI NH·∫¨N H√ÄNG (COD) - LINH HO·∫†T**
    private String processCODCheckout(String userInput) {
        if (userId == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.";
        }
        if (pendingCODInfo == null) {
            pendingCODInfo = "waiting";
            return "Vui l√≤ng cung c·∫•p th√¥ng tin nh·∫≠n h√†ng theo format:\n" +
                   "T√™n: [T√™n ng∆∞·ªùi nh·∫≠n]\n" +
                   "ƒê·ªãa ch·ªâ: [ƒê·ªãa ch·ªâ giao h√†ng]\n" +
                   "SƒêT: [S·ªë ƒëi·ªán tho·∫°i]";
        } else if ("waiting".equals(pendingCODInfo)) {
            pendingCODInfo = null;
            try {
                // N·∫øu c√≥ lastSelectedProduct th√¨ t·∫°o ƒë∆°n h√†ng nhanh cho s·∫£n ph·∫©m n√†y
                if (lastSelectedProduct != null) {
                    Product product = lastSelectedProduct;
                    BigDecimal price = getEffectivePrice(product);
                    StringBuilder confirmation = new StringBuilder();
                    confirmation.append("‚úÖ <b>ƒê∆°n h√†ng COD ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</b><br><br>");
                    confirmation.append("üìã <b>Th√¥ng tin nh·∫≠n h√†ng:</b><br>");
                    confirmation.append(userInput + "<br><br>");
                    confirmation.append("üõí <b>Chi ti·∫øt ƒë∆°n h√†ng:</b><br>");
                    confirmation.append(String.format("1. %s x1 - %,.0f VNƒê<br>", product.getProductName(), price.doubleValue()));
                    confirmation.append(String.format("<br>üí∞ <b>T·ªïng ti·ªÅn c·∫ßn thanh to√°n:</b> %,.0f VNƒê<br><br>", price.doubleValue()));
                    confirmation.append("üöö ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao t·∫≠n n∆°i trong 2-3 ng√†y l√†m vi·ªác.<br>");
                    confirmation.append("üíµ Vui l√≤ng chu·∫©n b·ªã ti·ªÅn m·∫∑t ƒë·ªÉ thanh to√°n khi nh·∫≠n h√†ng.<br>");
                    confirmation.append("üìû Nh√¢n vi√™n s·∫Ω li√™n h·ªá tr∆∞·ªõc khi giao h√†ng.<br><br>");
                    confirmation.append("C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng! üéâ");
                    return confirmation.toString();
                }
                // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m v·ª´a ch·ªçn th√¨ ki·ªÉm tra gi·ªè h√†ng
                Cart cart = cartService.getActiveCart(userId);
                if (cart == null) {
                    return "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
                }
                List<CartItem> cartItems = cartItemService.getAllByCartID_Admin(cart.getCartID());
                cartItems = cartItems.stream()
                    .filter(item -> !item.isIsDeleted() && !"checkout".equalsIgnoreCase(item.getStatus()))
                    .collect(Collectors.toList());
                if (cartItems.isEmpty()) {
                    return "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
                }
                BigDecimal totalAmount = BigDecimal.ZERO;
                for (CartItem item : cartItems) {
                    BigDecimal effectivePrice = getEffectivePrice(item.getProduct());
                    BigDecimal itemTotal = effectivePrice.multiply(BigDecimal.valueOf(item.getQuantity()));
                    totalAmount = totalAmount.add(itemTotal);
                }
                StringBuilder confirmation = new StringBuilder();
                confirmation.append("‚úÖ <b>ƒê∆°n h√†ng COD ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</b><br><br>");
                confirmation.append("üìã <b>Th√¥ng tin nh·∫≠n h√†ng:</b><br>");
                confirmation.append(userInput + "<br><br>");
                confirmation.append("üõí <b>Chi ti·∫øt ƒë∆°n h√†ng:</b><br>");
                for (int i = 0; i < cartItems.size(); i++) {
                    CartItem item = cartItems.get(i);
                    Product product = item.getProduct();
                    BigDecimal effectivePrice = getEffectivePrice(product);
                    BigDecimal itemTotal = effectivePrice.multiply(BigDecimal.valueOf(item.getQuantity()));
                    confirmation.append(String.format("%d. %s x%d - %,.0f VNƒê<br>", i + 1, product.getProductName(), item.getQuantity(), itemTotal.doubleValue()));
                }
                confirmation.append(String.format("<br>üí∞ <b>T·ªïng ti·ªÅn c·∫ßn thanh to√°n:</b> %,.0f VNƒê<br><br>", totalAmount.doubleValue()));
                confirmation.append("üöö ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao t·∫≠n n∆°i trong 2-3 ng√†y l√†m vi·ªác.<br>");
                confirmation.append("üíµ Vui l√≤ng chu·∫©n b·ªã ti·ªÅn m·∫∑t ƒë·ªÉ thanh to√°n khi nh·∫≠n h√†ng.<br>");
                confirmation.append("üìû Nh√¢n vi√™n s·∫Ω li√™n h·ªá tr∆∞·ªõc khi giao h√†ng.<br><br>");
                confirmation.append("C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng! üéâ");
                return confirmation.toString();
            } catch (Exception e) {
                System.err.println("Error processing COD checkout: " + e.getMessage());
                return "C√≥ l·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.";
            }
        }
        return "";
    }

    // **6. LOGIC PAYMENT - LINH HO·∫†T**
    private String processPayment(String input) {
        if (userId == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.";
        }
        try {
            // N·∫øu c√≥ lastSelectedProduct th√¨ thanh to√°n nhanh s·∫£n ph·∫©m n√†y
            if (lastSelectedProduct != null) {
                Product product = lastSelectedProduct;
                BigDecimal price = getEffectivePrice(product);
                String orderCode = "DH" + sessionId.replaceAll("[^0-9]", "") + "_SP" + product.getProductId();
                StringBuilder paymentInfo = new StringBuilder();
                paymentInfo.append("üí≥ <b>Thanh to√°n VietQR cho s·∫£n ph·∫©m:</b><br><br>");
                paymentInfo.append("üõí <b>Chi ti·∫øt ƒë∆°n h√†ng:</b><br>");
                paymentInfo.append(String.format("1. %s x1 - %,.0f VNƒê<br>", product.getProductName(), price.doubleValue()));
                paymentInfo.append(String.format("<br>üí∞ <b>T·ªïng ti·ªÅn c·∫ßn thanh to√°n:</b> %,.0f VNƒê<br><br>", price.doubleValue()));
                String qrUrl;
                try {
                    qrUrl = QRBankUtil.getVietQRUrl("VCB", "1031253640", price.longValue(), orderCode, "HUYNH NGOC SON");
                } catch (Exception e) {
                    qrUrl = "https://img.vietqr.io/image/VCB-1031253640-compact2.png?amount=" + price.longValue() + "&addInfo=" + orderCode + "&accountName=HUYNH NGOC SON";
                }
                paymentInfo.append("üè¶ <b>Th√¥ng tin chuy·ªÉn kho·∫£n:</b><br>");
                paymentInfo.append("Ng√¢n h√†ng: Vietcombank<br>");
                paymentInfo.append("üí≥ STK: <b>1031253640</b><br>");
                paymentInfo.append("üë§ Ch·ªß TK: <b>HUYNH NGOC SON</b><br>");
                paymentInfo.append("üíµ S·ªë ti·ªÅn: <b>" + String.format("%,d", price.longValue()) + " VNƒê</b><br>");
                paymentInfo.append("üìù N·ªôi dung: <b>" + orderCode + "</b><br>");
                paymentInfo.append("<img src=\"" + qrUrl + "\" alt=\"QR\" style=\"max-width:250px;\"><br>");
                paymentInfo.append("üìß G·ª≠i bi√™n lai sau khi chuy·ªÉn kho·∫£n ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng.");
                return paymentInfo.toString();
            }
            // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m v·ª´a ch·ªçn th√¨ ki·ªÉm tra gi·ªè h√†ng
            Cart cart = cartService.getActiveCart(userId);
            if (cart == null) {
                return "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
            }
            List<CartItem> cartItems = cartItemService.getAllByCartID_Admin(cart.getCartID());
            cartItems = cartItems.stream()
                .filter(item -> !item.isIsDeleted() && !"checkout".equalsIgnoreCase(item.getStatus()))
                .collect(Collectors.toList());
            if (cartItems.isEmpty()) {
                return "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
            }
            BigDecimal totalAmount = BigDecimal.ZERO;
            for (CartItem item : cartItems) {
                BigDecimal effectivePrice = getEffectivePrice(item.getProduct());
                BigDecimal itemTotal = effectivePrice.multiply(BigDecimal.valueOf(item.getQuantity()));
                totalAmount = totalAmount.add(itemTotal);
            }
            String orderCode = "DH" + sessionId.replaceAll("[^0-9]", "") + "_" + cart.getCartID();
            StringBuilder paymentInfo = new StringBuilder();
            paymentInfo.append("üí≥ <b>Thanh to√°n VietQR cho gi·ªè h√†ng:</b><br><br>");
            paymentInfo.append("üõí <b>Chi ti·∫øt ƒë∆°n h√†ng:</b><br>");
            for (int i = 0; i < cartItems.size(); i++) {
                CartItem item = cartItems.get(i);
                Product product = item.getProduct();
                BigDecimal effectivePrice = getEffectivePrice(product);
                BigDecimal itemTotal = effectivePrice.multiply(BigDecimal.valueOf(item.getQuantity()));
                paymentInfo.append(String.format("%d. %s x%d - %,.0f VNƒê<br>", i + 1, product.getProductName(), item.getQuantity(), itemTotal.doubleValue()));
            }
            paymentInfo.append(String.format("<br>üí∞ <b>T·ªïng ti·ªÅn c·∫ßn thanh to√°n:</b> %,.0f VNƒê<br><br>", totalAmount.doubleValue()));
            String qrUrl;
            try {
                qrUrl = QRBankUtil.getVietQRUrl("VCB", "1031253640", totalAmount.longValue(), orderCode, "HUYNH NGOC SON");
            } catch (Exception e) {
                qrUrl = "https://img.vietqr.io/image/VCB-1031253640-compact2.png?amount=" + totalAmount.longValue() + "&addInfo=" + orderCode + "&accountName=HUYNH NGOC SON";
            }
            paymentInfo.append("üè¶ <b>Th√¥ng tin chuy·ªÉn kho·∫£n:</b><br>");
            paymentInfo.append("Ng√¢n h√†ng: Vietcombank<br>");
            paymentInfo.append("üí≥ STK: <b>1031253640</b><br>");
            paymentInfo.append("üë§ Ch·ªß TK: <b>HUYNH NGOC SON</b><br>");
            paymentInfo.append("üíµ S·ªë ti·ªÅn: <b>" + String.format("%,d", totalAmount.longValue()) + " VNƒê</b><br>");
            paymentInfo.append("üìù N·ªôi dung: <b>" + orderCode + "</b><br>");
            paymentInfo.append("<img src=\"" + qrUrl + "\" alt=\"QR\" style=\"max-width:250px;\"><br>");
            paymentInfo.append("üìß G·ª≠i bi√™n lai sau khi chuy·ªÉn kho·∫£n ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng.");
            return paymentInfo.toString();
        } catch (Exception e) {
            System.err.println("Error processing payment: " + e.getMessage());
            return "C√≥ l·ªói khi x·ª≠ l√Ω thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // ====== B·ªî SUNG NGHI·ªÜP V·ª§ LINH HO·∫†T CHO COD & CHUY·ªÇN KHO·∫¢N ======
    // Helper: L·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh shipping c·ªßa user
    private Address getDefaultShippingAddress(int userId) {
        List<Address> addresses = addressService.getShipAddrByUserID(userId);
        if (addresses == null || addresses.isEmpty()) return null;
        for (Address addr : addresses) {
            if (addr.getIsDefault()) return addr;
        }
        return addresses.get(0); // fallback n·∫øu kh√¥ng c√≥ default
    }

    // Helper: L∆∞u ƒë·ªãa ch·ªâ user nh·∫≠p (COD) v·ªõi ki·ªÉm tra ƒë·∫ßu v√†o
    private Address createAddressFromUserInput(String userInput, int userId) {
        String[] lines = userInput.split("\n");
        String name = "", phone = "", province = "", district = "", ward = "", detail = "";
        for (String line : lines) {
            if (line.toLowerCase().contains("t√™n:")) name = line.replaceFirst("(?i)t√™n:", "").trim();
            if (line.toLowerCase().contains("ƒë·ªãa ch·ªâ:")) detail = line.replaceFirst("(?i)ƒë·ªãa ch·ªâ:", "").trim();
            if (line.toLowerCase().contains("sƒët:")) phone = line.replaceFirst("(?i)sƒët:", "").trim();
        }
        // Ki·ªÉm tra thi·∫øu th√¥ng tin
        if (name.isEmpty() || phone.isEmpty() || detail.isEmpty()) {
            throw new IllegalArgumentException("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n, s·ªë ƒëi·ªán tho·∫°i v√† ƒë·ªãa ch·ªâ giao h√†ng!");
        }
        Address addr = new Address(name, phone, province, district, ward, detail, false, "shipping", false, new model.entity.User(userId));
        addressService.createAddress(addr);
        return addr;
    }

    // Helper: T·∫°o Order v√† OrderItem, c·∫≠p nh·∫≠t tr·∫°ng th√°i Cart/CartItem
    private String createOrderAndCheckout(List<CartItem> cartItems, Address shippingAddr, String status, String notes) {
        if (cartItems == null || cartItems.isEmpty() || shippingAddr == null) return "Kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o ƒë∆°n h√†ng.";
        BigDecimal total = BigDecimal.ZERO;
        for (CartItem ci : cartItems) {
            BigDecimal price = getEffectivePrice(ci.getProduct());
            total = total.add(price.multiply(BigDecimal.valueOf(ci.getQuantity())));
        }
        Order order = new Order();
        order.setUser(cartItems.get(0).getCart().getUser());
        order.setShippingAddress(shippingAddr);
        order.setBillingAddress(shippingAddr);
        order.setStatus(status);
        order.setTotalAmount(total);
        order.setDiscountAmount(BigDecimal.ZERO);
        order.setShippingFee(BigDecimal.ZERO);
        order.setTax(BigDecimal.ZERO);
        order.setFinalAmount(total);
        order.setNotes(notes);
        orderService.createOrder(order);
        orderItemService.createOrderItemFromSelected(cartItems, order);
        for (CartItem ci : cartItems) {
            ci.setStatus("checkout");
            cartItemService.updateCartItem(ci);
        }
        return "ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n: " + order.getOrderNumber();
    }

    // H√†m m·ªõi: ƒê·∫∑t h√†ng COD linh ho·∫°t
    public String processCODCheckoutFlexible(String userInput) {
        if (userId == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.";
        }
        if (pendingCODInfo == null) {
            pendingCODInfo = "waiting";
            return "Vui l√≤ng cung c·∫•p th√¥ng tin nh·∫≠n h√†ng theo format:\nT√™n: [T√™n ng∆∞·ªùi nh·∫≠n]\nƒê·ªãa ch·ªâ: [ƒê·ªãa ch·ªâ giao h√†ng]\nSƒêT: [S·ªë ƒëi·ªán tho·∫°i]";
        } else if ("waiting".equals(pendingCODInfo)) {
            pendingCODInfo = null;
            try {
                Cart cart = cartService.getActiveCart(userId);
                if (cart == null) return "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
                List<CartItem> cartItems = cartItemService.getAllByCartID_UserSelected(cart.getCartID());
                cartItems = cartItems.stream().filter(item -> !item.isIsDeleted() && !"checkout".equalsIgnoreCase(item.getStatus())).collect(java.util.stream.Collectors.toList());
                if (cartItems.isEmpty()) return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ƒë·ªÉ ƒë·∫∑t h√†ng.";
                Address addr = createAddressFromUserInput(userInput, userId);
                String result = createOrderAndCheckout(cartItems, addr, Order.OrderStatus.PENDING.getValue(), "COD");
                return result + "\nƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao t·∫≠n n∆°i trong 2-3 ng√†y l√†m vi·ªác.";
            } catch (Exception e) {
                System.err.println("Error processing COD checkout: " + e.getMessage());
                return "C√≥ l·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.";
            }
        }
        return "";
    }

    // H√†m m·ªõi: ƒê·∫∑t h√†ng chuy·ªÉn kho·∫£n linh ho·∫°t
    public String processPaymentFlexible(String input) {
        if (userId == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.";
        }
        try {
            Cart cart = cartService.getActiveCart(userId);
            if (cart == null) return "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
            List<CartItem> cartItems = cartItemService.getAllByCartID_UserSelected(cart.getCartID());
            cartItems = cartItems.stream().filter(item -> !item.isIsDeleted() && !"checkout".equalsIgnoreCase(item.getStatus())).collect(java.util.stream.Collectors.toList());
            if (cartItems.isEmpty()) return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ƒë·ªÉ ƒë·∫∑t h√†ng.";
            Address addr = getDefaultShippingAddress(userId);
            if (addr == null) return "B·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh. Vui l√≤ng th√™m ƒë·ªãa ch·ªâ tr∆∞·ªõc khi thanh to√°n.";
            String result = createOrderAndCheckout(cartItems, addr, Order.OrderStatus.CONFIRMED.getValue(), "VietQR");
            return result + "\nVui l√≤ng chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n ƒë·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng.";
        } catch (Exception e) {
            System.err.println("Error processing payment: " + e.getMessage());
            return "C√≥ l·ªói khi x·ª≠ l√Ω thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // H√†m m·ªõi: ƒê·∫∑t h√†ng linh ho·∫°t theo ph∆∞∆°ng th·ª©c thanh to√°n
    public String processOrderFlexible(boolean isCOD, String userInput) {
        if (userId == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng.";
        }
        try {
            Cart cart = cartService.getActiveCart(userId);
            if (cart == null) return "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
            List<CartItem> cartItems = cartItemService.getAllByCartID_UserSelected(cart.getCartID());
            cartItems = cartItems.stream().filter(item -> !item.isIsDeleted() && !"checkout".equalsIgnoreCase(item.getStatus())).collect(java.util.stream.Collectors.toList());
            if (cartItems.isEmpty()) return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ƒë·ªÉ ƒë·∫∑t h√†ng.";
            Address addr;
            String status;
            String notes;
            if (isCOD) {
                // COD: l·∫•y ƒë·ªãa ch·ªâ user nh·∫≠p, tr·∫°ng th√°i pending
                addr = createAddressFromUserInput(userInput, userId);
                status = Order.OrderStatus.PENDING.getValue();
                notes = "COD";
            } else {
                // Chuy·ªÉn kho·∫£n: l·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh, tr·∫°ng th√°i confirmed
                addr = getDefaultShippingAddress(userId);
                if (addr == null) return "B·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh. Vui l√≤ng th√™m ƒë·ªãa ch·ªâ tr∆∞·ªõc khi thanh to√°n.";
                status = Order.OrderStatus.CONFIRMED.getValue();
                notes = "VietQR";
            }
            String result = createOrderAndCheckout(cartItems, addr, status, notes);
            if (isCOD) {
                return result + "\nƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c giao t·∫≠n n∆°i trong 2-3 ng√†y l√†m vi·ªác. Tr·∫°ng th√°i: pending.";
            } else {
                // Sinh m√£ QR cho chuy·ªÉn kho·∫£n
                BigDecimal total = cartItems.stream().map(ci -> getEffectivePrice(ci.getProduct()).multiply(BigDecimal.valueOf(ci.getQuantity()))).reduce(BigDecimal.ZERO, BigDecimal::add);
                String orderCode = "DH" + sessionId.replaceAll("[^0-9]", "") + "_" + cart.getCartID();
                String qrUrl;
                try {
                    qrUrl = QRBankUtil.getVietQRUrl("VCB", "1031253640", total.longValue(), orderCode, "HUYNH NGOC SON");
                } catch (Exception e) {
                    qrUrl = "https://img.vietqr.io/image/VCB-1031253640-compact2.png?amount=" + total.longValue() + "&addInfo=" + orderCode + "&accountName=HUYNH NGOC SON";
                }
                return result + "\nVui l√≤ng chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n ƒë·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng. Tr·∫°ng th√°i: confirmed.\nM√£ QR chuy·ªÉn kho·∫£n: " + qrUrl;
            }
        } catch (Exception e) {
            System.err.println("Error processing flexible order: " + e.getMessage());
            return "C√≥ l·ªói khi x·ª≠ l√Ω ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // H√†m m·ªõi: ƒê·∫∑t h√†ng ƒë∆°n l·∫ª an to√†n (1 s·∫£n ph·∫©m, chuy·ªÉn kho·∫£n ho·∫∑c COD)
    public String processSingleProductOrderSafe(Product product, boolean isCOD, int userId, String userInput) {
        if (userId == 0 || product == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v√† ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng.";
        }
        try {
            // T·∫°o CartItem t·∫°m cho s·∫£n ph·∫©m ƒë∆°n l·∫ª
            Cart tempCart = new Cart("active", new model.entity.User(userId));
            CartItem tempItem = new CartItem(1, "selected", false, tempCart, product);
            List<CartItem> cartItems = java.util.Collections.singletonList(tempItem);
            Address addr;
            String notes;
            if (isCOD) {
                try {
                    addr = createAddressFromUserInput(userInput, userId);
                } catch (IllegalArgumentException ex) {
                    return ex.getMessage();
                }
                notes = "COD";
            } else {
                addr = getDefaultShippingAddress(userId);
                if (addr == null) return "B·∫°n b·∫Øt bu·ªôc ph·∫£i nh·∫≠p ƒë·ªãa ch·ªâ tr∆∞·ªõc khi thanh to√°n.";
                notes = "VietQR";
            }
            String result = createOrderAndCheckout(cartItems, addr, Order.OrderStatus.PENDING.getValue(), notes);
            if (isCOD) {
                return result + "\nƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù x√°c nh·∫≠n v√† s·∫Ω ƒë∆∞·ª£c giao t·∫≠n n∆°i trong 2-3 ng√†y l√†m vi·ªác. Tr·∫°ng th√°i: pending.";
            } else {
                BigDecimal total = getEffectivePrice(product);
                String orderCode = "DH" + sessionId.replaceAll("[^0-9]", "") + "_SP" + product.getProductId();
                String qrUrl;
                try {
                    qrUrl = QRBankUtil.getVietQRUrl("VCB", "1031253640", total.longValue(), orderCode, "HUYNH NGOC SON");
                } catch (Exception e) {
                    qrUrl = "https://img.vietqr.io/image/VCB-1031253640-compact2.png?amount=" + total.longValue() + "&addInfo=" + orderCode + "&accountName=HUYNH NGOC SON";
                }
                return result + "\nVui l√≤ng chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n ƒë·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng. ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c admin x√°c nh·∫≠n khi nh·∫≠n ƒë∆∞·ª£c ti·ªÅn. Tr·∫°ng th√°i: pending.\nM√£ QR chuy·ªÉn kho·∫£n: " + qrUrl;
            }
        } catch (Exception e) {
            System.err.println("Error processing single product order: " + e.getMessage());
            return "C√≥ l·ªói khi x·ª≠ l√Ω ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // S·ª≠a l·∫°i processOrderSafe: n·∫øu lastSelectedProduct != null th√¨ mua ƒë∆°n l·∫ª, c√≤n l·∫°i l√† gi·ªè h√†ng
    public String processOrderSafe(boolean isCOD, String userInput) {
        if (userId == null) {
            return "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng.";
        }
        try {
            if (lastSelectedProduct != null) {
                // Mua ƒë∆°n l·∫ª
                return processSingleProductOrderSafe(lastSelectedProduct, isCOD, userId, userInput);
            }
            // Mua theo gi·ªè h√†ng
            Cart cart = cartService.getActiveCart(userId);
            if (cart == null) return "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng ho·∫∑c b·∫°n ch∆∞a ch·ªçn s·∫£n ph·∫©m n√†o.";
            List<CartItem> cartItems = cartItemService.getAllByCartID_UserSelected(cart.getCartID());
            cartItems = cartItems.stream().filter(item -> !item.isIsDeleted() && !"checkout".equalsIgnoreCase(item.getStatus())).collect(java.util.stream.Collectors.toList());
            if (cartItems.isEmpty()) return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ƒë·ªÉ ƒë·∫∑t h√†ng.";
            Address addr;
            String notes;
            if (isCOD) {
                try {
                    addr = createAddressFromUserInput(userInput, userId);
                } catch (IllegalArgumentException ex) {
                    return ex.getMessage();
                }
                notes = "COD";
            } else {
                addr = getDefaultShippingAddress(userId);
                if (addr == null) return "B·∫°n b·∫Øt bu·ªôc ph·∫£i nh·∫≠p ƒë·ªãa ch·ªâ tr∆∞·ªõc khi thanh to√°n.";
                notes = "VietQR";
            }
            String result = createOrderAndCheckout(cartItems, addr, Order.OrderStatus.PENDING.getValue(), notes);
            if (isCOD) {
                return result + "\nƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù x√°c nh·∫≠n v√† s·∫Ω ƒë∆∞·ª£c giao t·∫≠n n∆°i trong 2-3 ng√†y l√†m vi·ªác. Tr·∫°ng th√°i: pending.";
            } else {
                BigDecimal total = cartItems.stream().map(ci -> getEffectivePrice(ci.getProduct()).multiply(BigDecimal.valueOf(ci.getQuantity()))).reduce(BigDecimal.ZERO, BigDecimal::add);
                String orderCode = "DH" + sessionId.replaceAll("[^0-9]", "") + "_" + cart.getCartID();
                String qrUrl;
                try {
                    qrUrl = QRBankUtil.getVietQRUrl("VCB", "1031253640", total.longValue(), orderCode, "HUYNH NGOC SON");
                } catch (Exception e) {
                    qrUrl = "https://img.vietqr.io/image/VCB-1031253640-compact2.png?amount=" + total.longValue() + "&addInfo=" + orderCode + "&accountName=HUYNH NGOC SON";
                }
                return result + "\nVui l√≤ng chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n ƒë·ªÉ ho√†n t·∫•t ƒë∆°n h√†ng. ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c admin x√°c nh·∫≠n khi nh·∫≠n ƒë∆∞·ª£c ti·ªÅn. Tr·∫°ng th√°i: pending.\nM√£ QR chuy·ªÉn kho·∫£n: " + qrUrl;
            }
        } catch (Exception e) {
            System.err.println("Error processing safe order: " + e.getMessage());
            return "C√≥ l·ªói khi x·ª≠ l√Ω ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // S·ª≠a l·∫°i x·ª≠ l√Ω h·ªôi tho·∫°i ƒë·ªÉ ∆∞u ti√™n ƒë∆°n l·∫ª n·∫øu v·ª´a ch·ªçn s·∫£n ph·∫©m
    public String processUserInputSafe(String userInput) {
        String lower = userInput.toLowerCase();
        // N·∫øu user ch·ªçn s·ªë th·ª© t·ª± s·∫£n ph·∫©m
        if (userInput.matches("^\\d+$")) {
            int idx = Integer.parseInt(userInput);
            if (idx > 0 && idx <= lastListedProducts.size()) {
                lastSelectedProduct = lastListedProducts.get(idx - 1);
                return "B·∫°n ƒë√£ ch·ªçn: " + lastSelectedProduct.getProductName() + ". B·∫°n mu·ªën thanh to√°n b·∫±ng COD hay chuy·ªÉn kho·∫£n?";
            }
        }
        // N·∫øu user g√µ chuy·ªÉn kho·∫£n ho·∫∑c COD
        if (lower.contains("chuy·ªÉn kho·∫£n")) {
            if (lastSelectedProduct != null) {
                String result = processSingleProductOrderSafe(lastSelectedProduct, false, userId, "");
                lastSelectedProduct = null; // reset ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
                return result;
            } else {
                return processOrderSafe(false, "");
            }
        }
        if (lower.contains("cod") || lower.contains("thanh to√°n khi nh·∫≠n h√†ng") || lower.contains("ti·ªÅn m·∫∑t")) {
            if (lastSelectedProduct != null) {
                return "Vui l√≤ng nh·∫≠p th√¥ng tin nh·∫≠n h√†ng theo format:\nT√™n: [T√™n ng∆∞·ªùi nh·∫≠n]\nƒê·ªãa ch·ªâ: [ƒê·ªãa ch·ªâ giao h√†ng]\nSƒêT: [S·ªë ƒëi·ªán tho·∫°i]";
            } else {
                return "Vui l√≤ng nh·∫≠p th√¥ng tin nh·∫≠n h√†ng cho gi·ªè h√†ng theo format:\nT√™n: [T√™n ng∆∞·ªùi nh·∫≠n]\nƒê·ªãa ch·ªâ: [ƒê·ªãa ch·ªâ giao h√†ng]\nSƒêT: [S·ªë ƒëi·ªán tho·∫°i]";
            }
        }
        // N·∫øu user nh·∫≠p th√¥ng tin nh·∫≠n h√†ng sau khi ch·ªçn COD
        if (lastSelectedProduct != null && (userInput.toLowerCase().contains("t√™n:") && userInput.toLowerCase().contains("ƒë·ªãa ch·ªâ:") && userInput.toLowerCase().contains("sƒët:"))) {
            String result = processSingleProductOrderSafe(lastSelectedProduct, true, userId, userInput);
            lastSelectedProduct = null;
            return result;
        }
        // N·∫øu user nh·∫≠p th√¥ng tin nh·∫≠n h√†ng cho gi·ªè h√†ng
        if (userInput.toLowerCase().contains("t√™n:") && userInput.toLowerCase().contains("ƒë·ªãa ch·ªâ:") && userInput.toLowerCase().contains("sƒët:")) {
            return processOrderSafe(true, userInput);
        }
        // M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ t∆∞ v·∫•n
        return "B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ th√™m? H√£y ch·ªçn s·∫£n ph·∫©m ho·∫∑c ph∆∞∆°ng th·ª©c thanh to√°n!";
    }

    // **7. MAIN PROCESSOR - C·∫≠p nh·∫≠t v·ªõi logic m·ªõi LINH HO·∫†T**
    public String processUserInput(String userInput) {
        conversationHistory.add(new Message("user", userInput));
        String lower = userInput.toLowerCase();
        // N·∫øu ng∆∞·ªùi d√πng g√µ "gi·ªè h√†ng" ho·∫∑c "cart" th√¨ ch·ªâ cho ph√©p thanh to√°n gi·ªè h√†ng
        if (lower.contains("gi·ªè h√†ng") || lower.contains("cart")) {
            return getCartSummary();
        }
        // N·∫øu ng∆∞·ªùi d√πng g√µ "thanh to√°n khi nh·∫≠n h√†ng" ho·∫∑c "cod" ho·∫∑c "ti·ªÅn m·∫∑t" th√¨ ∆∞u ti√™n s·∫£n ph·∫©m v·ª´a ch·ªçn, n·∫øu kh√¥ng c√≥ th√¨ m·ªõi d√πng gi·ªè h√†ng
        if (lower.contains("thanh to√°n khi nh·∫≠n h√†ng") || lower.contains("cod") || lower.contains("ti·ªÅn m·∫∑t")) {
            return processCODCheckout(userInput);
        }
        // N·∫øu ng∆∞·ªùi d√πng g√µ "chuy·ªÉn kho·∫£n" ho·∫∑c "vietqr" ho·∫∑c "qr" th√¨ ∆∞u ti√™n s·∫£n ph·∫©m v·ª´a ch·ªçn, n·∫øu kh√¥ng c√≥ th√¨ m·ªõi d√πng gi·ªè h√†ng
        if (lower.contains("chuy·ªÉn kho·∫£n") || lower.contains("vietqr") || lower.contains("qr")) {
            return processPayment(userInput);
        }
        // X·ª≠ l√Ω ch·ªçn s·∫£n ph·∫©m
        if (userInput.matches("^\\d+$")) {
            handleSelection(userInput);
        }
        // Sinh response t·ª´ AI (T·ª∞ NHI√äN)
        try {
            String response = llm.generateResponse(conversationHistory);
            if (response.contains("1.") && response.contains("2.")) {
                extractProductsFromResponse(response);
            }
            conversationHistory.add(new Message("assistant", response));
            return response;
        } catch (Exception e) {
            return "L·ªói k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    // **8. UTILITY METHODS**
    public String getGreeting() {
        try {
            List<Message> greeting = Arrays.asList(
                conversationHistory.get(0),
                new Message("user", "Xin ch√†o, t√¥i c·∫ßn t∆∞ v·∫•n m·ªπ ph·∫©m")
            );
            return llm.generateResponse(greeting);
        } catch (Exception e) {
            return "Xin ch√†o! T√¥i l√† AI t∆∞ v·∫•n m·ªπ ph·∫©m. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?";
        }
    }

    public boolean shouldEndConversation(String input) {
        return Arrays.asList("bye", "t·∫°m bi·ªát", "k·∫øt th√∫c", "exit").contains(input.toLowerCase().trim());
    }

    public String getConversationSummary() {
        if (conversationHistory.size() <= 1) return "Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán.";
        
        StringBuilder summary = new StringBuilder("T√≥m t·∫Øt cu·ªôc tr√≤ chuy·ªán:\n");
        for (int i = 1; i < conversationHistory.size(); i++) {
            Message msg = conversationHistory.get(i);
            String role = msg.getRole().equals("user") ? "Kh√°ch" : "AI";
            summary.append(role).append(": ").append(msg.getContent()).append("\n");
        }
        return summary.toString();
    }
}
